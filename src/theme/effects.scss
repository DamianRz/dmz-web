@mixin effect-slide($to, $origin, $seconds) {
    @keyframes slide_#{$to} {
        0% {
            #{$to}: calc(#{$origin} * -1);
        }

        100% {
            #{$to}: 0;
        }
    }

    animation-name: slide_#{$to};
    animation-duration: $seconds;
}


@mixin effect-appear($seconds) {
    @keyframes appear {

        0% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    animation-name: appear;
    animation-duration: $seconds;
}


@mixin effect-rotate($seconds, $loop_count, $delay) {

    @keyframes rotation {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }
    }

    animation-name: rotation;
    animation-delay: $delay;
    animation-duration: $seconds;
    animation-iteration-count: $loop_count;
}


@mixin effect-position($seconds, $loop_count, $delay) {
    @keyframes move {
        0% {
            left: 0px;
        }

        50% {
            left: random(300) + px;
        }

        100% {
            left: 0px;
        }
    }

    animation-name: move;
    animation-delay: $delay;
    animation-duration: $seconds;
    animation-iteration-count: $loop_count;
}


@mixin image-scale($seconds, $loop_count) {
    @keyframes scale {
        0% {
            background-size: 120%;
        }

        50% {
            background-size: 150%;
        }

        100% {
            background-size: 120%;
        }
    }

    animation-name: scale;
    animation-duration: $seconds;
    animation-iteration-count: $loop_count;
}



/* animation mixing
keyframe animation
@include animation('animation-name .4s 1')*/

@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }

    -webkit-animation: $animations;
    -moz-animation: $animations;
    -o-animation: $animations;
    animation: $animations;
}


/// Mixin to place items on a circle
/// @author Hugo Giraudel
/// @author Ana Tudor
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
@mixin on-circle($item-count, $circle-size, $item-size) {
    position: relative;
    width: $circle-size;
    height: $circle-size;
    padding: 0;
    border-radius: 50%;
    list-style: none;
    border-style: dotted;
    border-color: $warm-color;
    opacity: .5;

    >* {
        display: block;
        position: absolute;
        top: 50%;
        left: 50%;
        width: $item-size;
        height: $item-size;
        margin: -($item-size / 2);

        $angle: (360 / $item-count);
        $rot: 0;

        @for $i from 1 through $item-count {
            &:nth-of-type(#{$i}) {
                transform:
                    rotate($rot * 1deg) translate($circle-size / 2) rotate($rot * -1deg);
            }

            $rot: $rot+$angle;
        }
    }
}